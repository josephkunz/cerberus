class TrackJob < ApplicationJob
  queue_as :default

  def perform(params)
    infringement = Infringement.find(params)

    print_start_job(infringement)
    create_screenshot(infringement)
    print_end_job(infringement)
  end

  private

  def print_start_job(infringement)
    puts ""
    puts "\e[32m I'm starting the download job on following infringement: \e[0m"
    puts "\e[32m -------------------------------------------------------- \e[0m"
    puts " Name: \e[31m#{infringement.name}\e[0m"
    puts " Url: \e[31m#{infringement.url}\e[0m"
    puts " Interval: \e[31m#{infringement.interval}\e[0m"
    puts ""
  end

  def print_end_job(infringement)
    puts ""
    puts "\e[32m ------------ \e[0m"
    puts "\e[32m Job on infr. #{infringement.name}, url: #{infringement.url} completed OK \e[0m"
    puts ""
  end

  def print_job_info(screenshot)
    puts "\e[32m Snapshot created: \e[0m"
    puts "\e[32m ----------------- \e[0m"
    puts " Id: \e[31m#{screenshot.id}\e[0m"
    puts " Time: \e[31m#{screenshot.time}\e[0m"
    puts " Url: \e[31m#{screenshot.infringement.url}\e[0m"
  end

  def create_screenshot(infringement)
    screenshot = Snapshot.new
    screenshot.time = Time.now
    screenshot.infringement_id = infringement.id

    filename = screenshot.time.to_s + '.png'

    screenshot_url = prepare_url2png(infringement.url)
    process_screenshot(screenshot_url, screenshot.time, filename)

    open(filename) do |file|
      screenshot.image_path = file
    end

    screenshot.save
    File.delete(filename)
    print_job_info(screenshot)
  end

  def prepare_url2png(url)
    config = Config.all.first

    options = {
      url: url,
      fullpage: config.fullpage,
      thumbnail_max_width: config.thumbnail_width,
      viewport: config.viewport,
      unique: Time.now.to_i / 30
    }

    return ScreenshotTaker.new(options).url
  end

  def process_screenshot(screenshot_url, time, filename)
    open('temporary.png', 'wb') do |file|
      file << open(screenshot_url).read
      image = MiniMagick::Image.open(file)
      image.combine_options do |param|
        param.fill "white"
        param.draw "rectangle 5,5,390,21"
        param.fill "black"
        param.draw "text 8,17 'Generated by Cerberus at: #{time}'"
      end
      image.write(filename)
    end
  end
end
